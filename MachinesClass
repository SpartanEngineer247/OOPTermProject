#pragma once

#ifndef MACHINES_H
#define MACHINES_H
#include<string>
#include "Users_Database.h"
#include "User.h"
#include<iostream>

//Base class
class Machine
{
protected:
	string name;	//name of machine
	bool status;	//availability of machine - if false, machine is available to use
	int timer;		//the time left of the machine's operation - this may be removed if needed
public:
	//default constructor
	Machine()
	{
		name = "NA";
		status = false;
		timer = 0;
	}
	//preferred constructor - the inputs are ideally taken from file information
	Machine(string newname, bool currentstatus, int currenttime)
	{
		name = newname;
		status = currentstatus;
		timer = currenttime;
	}

	//getters
	string getname()
	{
		return name;
	}
	bool getstatus()
	{
		return status;
	}
	int gettimer()
	{
		return timer;
	}

	//simple change status function, flips the status on or off - has a 'dummy' input for later polymorphism
	virtual void changestatus(int setting)
	{
		status = !status;
	}

	//abstract function, should print out the operational information of the machine
	virtual void printoperation() = 0;

	//machine that checks whether the timer is positive and if so, mark the machine as operating
	//again this may be removed depending on how timer is implemented
	void autoupdate()
	{
		if (timer == 0)
		{
			status = false;
		}
		else
		{
			status = true;
		}
	}
};

class WashingMachine : public Machine
{
private:
	//hardcoded some 'minutes of operation' of a washing machine - this may be updated later to be able to read from file
	int machinefunction[5] = { 40, 80, 90, 120, 150 };

	//setting to the 'minutes of operation' the machine is operating with right now. Is -1 if the machine is not working
	int currentfunction;
public:
	//constructors - pretty self explanatory
	WashingMachine() :Machine() { currentfunction = -1; }
	WashingMachine(string inname, bool currentstatus, int currenttime, int currentsetting) :Machine(inname, currentstatus, currenttime)
	{
		currentfunction = currentsetting;
	}

	//change status now depends on which setting the machine is set to... -1 means its empty and available, anything else
	//and it is currently in operation
	void changestatus(int setting)
	{
		if (setting == -1)
		{
			status = false;
		}
		else
		{
			status = true;
			currentfunction = setting;
		}
	}

	//prints the operating status of the machine right now
	void printoperation()
	{
		cout << endl << "Washing Machine " << name;
		cout << endl << "Current status: ";
		if (status == false)
		{
			cout << "AVAILABLE";
		}
		else
		{
			cout << "IN OPERATION.";
			cout << endl << "Current Cycle Setting: " << machinefunction[currentfunction] << " minutes";
			cout << endl << "Time left: " << timer;
		}
	}
};

class DryingMachine : public Machine
{
private:
	int machinefunction[5] = { 20, 40, 55, 120, 150 };
	int currentfunction;
	bool needcleaning;
public:
	//constructors, easy enough
	DryingMachine() :Machine() { currentfunction = -1; needcleaning = true; }
	DryingMachine(string inname, bool currentstatus, int currenttime, int currentsetting) :Machine(inname, currentstatus, currenttime)
	{
		currentfunction = currentsetting;
		needcleaning = true;
	}

	//again the drying machine status is dependent on its current function, but if it's empty it will mark as being needed to clean
	void changestatus(int setting)
	{
		if (setting == -1)
		{
			status = false;
			needcleaning = true;
		}
		else
		{
			status = true;
			currentfunction = setting;
		}
	}

	//a function which changes the status of the machine to having been cleaned
	void cleaned()
	{
		needcleaning = false;
	}

	//prints the operating status of the machine right now
	void printoperation()
	{
		cout << endl << "Drying Machine " << name;
		cout << endl << "Current status: ";
		if (status == false)
		{
			cout << "AVAILABLE";
		}
		else
		{
			cout << "IN OPERATION.";
			cout << endl << "Current Cycle Setting: " << machinefunction[currentfunction] << " minutes";
			cout << endl << "Time left: " << timer;
		}
		if (needcleaning == true)
		{
			cout << endl << "PLEASE CLEAN THE MACHINE'S FILTER AND EMPTY ITS WATER BUCKET!";
		}
	}
};

#endif
